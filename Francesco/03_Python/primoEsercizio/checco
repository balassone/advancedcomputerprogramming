import logging
import threading
import time
from random import randint

CONSUMER = 'Consumer'
PRODUCER = 'Producer'
N_CONSUMERS = 10
N_PRODUCERS = 10
QUEUE_SIZE = 5

logging.basicConfig(level=logging.DEBUG, format='[%(threadName)-0s] %(message)s',)

def an_item_is_available(queue):
    return not (len(queue) == 0)

def a_space_is_available(queue):
    return not (len(queue) == QUEUE_SIZE)

def get_an_available_item(queue):
    return queue.pop(0)

def make_an_available_item(queue):
    item = randint(1, 100)
    queue.append(item)
    return item

class ConsumerThread (threading.Thread):
    
    def __init__ (self, producer_cv, consumer_cv, queue, name):
        super().__init__(name = name) # Quando si usa super, self Ã¨ implicito. Gruppo None -> Il problema era self
        self.producer_cv = producer_cv
        self.consumer_cv = consumer_cv
        self.queue = queue

    def run (self):
    
        # with fa automaticamente acquire() all'inizio e release() alla fine
        with self.consumer_cv:

            logging.debug('Lock acquisito')

            # Controllo della condition
            while not an_item_is_available(self.queue):
                logging.debug("Waiting for an item")
                self.consumer_cv.wait()
            
            # Consumazione
            item = get_an_available_item(self.queue)
            logging.debug('Item consumato: %d', item)

            # Segnalazione
            self.producer_cv.notify()

            logging.debug('Lock rilasciato')

def produce_item(producer_cv, consumer_cv, queue):

    with producer_cv:
        logging.debug("Lock acquisito")
        
        while not a_space_is_available(queue):
            logging.debug("Waiting for a space")
            producer_cv.wait()
  
        item = make_an_available_item(queue)
        logging.debug("Elemento prodotto: %d", item)

        consumer_cv.notify()
        
        logging.debug("Lock rilasciato")


def main():

    # Creazione della coda
    queue = []

    # Variabili per la sincronizzazione (con variabili condition)
    lock = threading.Lock()                         # Lock
    producer_cv = threading.Condition(lock = lock)  # CV_PROD
    consumer_cv = threading.Condition(lock = lock)  # CV_CONS

    # Liste contenitore per i thread
    consumers = []
    producers = []

    # Creazione dei produttori come callable objects
    for i in range(N_PRODUCERS):
        name = PRODUCER + str(i)
        pt = threading.Thread(target = produce_item, args = (producer_cv, consumer_cv, queue), name = name)
        
        pt.start()
        
        producers.append(pt)

    # Creazione dei consumatori per estensione della classe Thread
    for i in range(N_CONSUMERS):
        name = CONSUMER + str(i)
        ct = ConsumerThread(producer_cv, consumer_cv, queue, name)
        ct.start()

        consumers.append(ct)

    # Attesa per il join
    for i in range(N_PRODUCERS):
        producers[i].join()
    
    for i in range(N_CONSUMERS):
        consumers[i].join()


if __name__ == '__main__':
    main()